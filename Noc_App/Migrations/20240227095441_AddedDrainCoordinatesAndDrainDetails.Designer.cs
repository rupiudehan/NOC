// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Noc_App.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NocApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240227095441_AddedDrainCoordinatesAndDrainDetails")]
    partial class AddedDrainCoordinatesAndDrainDetails
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Noc_App.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int?>("SubDivisionId")
                        .HasColumnType("integer");

                    b.Property<int?>("TehsilBlockId")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("VillageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SubDivisionId");

                    b.HasIndex("TehsilBlockId");

                    b.HasIndex("VillageId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Noc_App.Models.DivisionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DivisionDetails");
                });

            modelBuilder.Entity("Noc_App.Models.DrainCoordinatesDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DrainId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DrainId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DrainCoordinatesDetails");
                });

            modelBuilder.Entity("Noc_App.Models.DrainDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DrainDetails");
                });

            modelBuilder.Entity("Noc_App.Models.SubDivisionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DivisionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DivisionId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SubDivisionDetails");
                });

            modelBuilder.Entity("Noc_App.Models.TehsilBlockDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("SubDivisionId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SubDivisionId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TehsilBlockDetails");
                });

            modelBuilder.Entity("Noc_App.Models.VillageDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("PinCode")
                        .HasColumnType("integer");

                    b.Property<int>("TehsilBlockId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VillageName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TehsilBlockId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("VillageDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Noc_App.Models.ApplicationUser", b =>
                {
                    b.HasOne("Noc_App.Models.DivisionDetails", "Division")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Noc_App.Models.SubDivisionDetails", "SubDivision")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("SubDivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Noc_App.Models.TehsilBlockDetails", "TehsilBlock")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("TehsilBlockId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Noc_App.Models.VillageDetails", "Village")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Division");

                    b.Navigation("SubDivision");

                    b.Navigation("TehsilBlock");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("Noc_App.Models.DivisionDetails", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("Divisions")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Noc_App.Models.ApplicationUser", "User2")
                        .WithMany("Divisions2")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Noc_App.Models.DrainCoordinatesDetails", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("DrainCoordinates")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Noc_App.Models.DrainDetails", "Drain")
                        .WithMany("DrainCoordinates")
                        .HasForeignKey("DrainId");

                    b.HasOne("Noc_App.Models.ApplicationUser", "User2")
                        .WithMany("DrainCoordinates2")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Drain");

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Noc_App.Models.DrainDetails", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("Drains")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Noc_App.Models.ApplicationUser", "User2")
                        .WithMany("Drains2")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Noc_App.Models.SubDivisionDetails", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("SubDivisions")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Noc_App.Models.DivisionDetails", "Division")
                        .WithMany("SubDivision")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ApplicationUser", "User2")
                        .WithMany("SubDivisions2")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Division");

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Noc_App.Models.TehsilBlockDetails", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("TehsilBlocks")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Noc_App.Models.SubDivisionDetails", "SubDivision")
                        .WithMany("TehsilBlock")
                        .HasForeignKey("SubDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ApplicationUser", "User2")
                        .WithMany("TehsilBlocks2")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("SubDivision");

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Noc_App.Models.VillageDetails", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("Villages")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Noc_App.Models.TehsilBlockDetails", "TehsilBlock")
                        .WithMany("Village")
                        .HasForeignKey("TehsilBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ApplicationUser", "User2")
                        .WithMany("Villages2")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("TehsilBlock");

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Noc_App.Models.ApplicationUser", b =>
                {
                    b.Navigation("Divisions");

                    b.Navigation("Divisions2");

                    b.Navigation("DrainCoordinates");

                    b.Navigation("DrainCoordinates2");

                    b.Navigation("Drains");

                    b.Navigation("Drains2");

                    b.Navigation("SubDivisions");

                    b.Navigation("SubDivisions2");

                    b.Navigation("TehsilBlocks");

                    b.Navigation("TehsilBlocks2");

                    b.Navigation("Villages");

                    b.Navigation("Villages2");
                });

            modelBuilder.Entity("Noc_App.Models.DivisionDetails", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("SubDivision");
                });

            modelBuilder.Entity("Noc_App.Models.DrainDetails", b =>
                {
                    b.Navigation("DrainCoordinates");
                });

            modelBuilder.Entity("Noc_App.Models.SubDivisionDetails", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("TehsilBlock");
                });

            modelBuilder.Entity("Noc_App.Models.TehsilBlockDetails", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("Noc_App.Models.VillageDetails", b =>
                {
                    b.Navigation("ApplicationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
