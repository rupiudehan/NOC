// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Noc_App.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NocApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240409180253_initpayment")]
    partial class initpayment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Noc_App.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Noc_App.Models.DivisionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DivisionDetails");
                });

            modelBuilder.Entity("Noc_App.Models.GrantApprovalMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GrantApprovalMaster");
                });

            modelBuilder.Entity("Noc_App.Models.GrantDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressProofPhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantEmailID")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantName")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationID")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationLetterPhotoPath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ForwardLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Hadbast")
                        .HasColumnType("text");

                    b.Property<string>("IDProofPhotoPath")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExtension")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForwarded")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPending")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSentBack")
                        .HasColumnType("boolean");

                    b.Property<string>("KMLFilePath")
                        .HasColumnType("text");

                    b.Property<string>("KMLLinkName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NocNumber")
                        .HasColumnType("text");

                    b.Property<int>("NocPermissionTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("NocTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("OtherProjectTypeDetail")
                        .HasColumnType("text");

                    b.Property<string>("PlotNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PreviousDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SentBackLevel")
                        .HasColumnType("integer");

                    b.Property<int>("SiteAreaUnitId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VillageID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NocPermissionTypeID");

                    b.HasIndex("NocTypeId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("SiteAreaUnitId");

                    b.HasIndex("VillageID");

                    b.ToTable("GrantDetails");
                });

            modelBuilder.Entity("Noc_App.Models.GrantKhasraDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GrantID")
                        .HasColumnType("integer");

                    b.Property<double>("KanalOrBiswa")
                        .HasColumnType("double precision");

                    b.Property<string>("KhasraNo")
                        .HasColumnType("text");

                    b.Property<double>("MarlaOrBiswansi")
                        .HasColumnType("double precision");

                    b.Property<double>("SarsaiOrBigha")
                        .HasColumnType("double precision");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GrantID");

                    b.HasIndex("UnitId");

                    b.ToTable("GrantKhasraDetails");
                });

            modelBuilder.Entity("Noc_App.Models.GrantPaymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GrantID")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentOrderId")
                        .HasColumnType("text");

                    b.Property<string>("Paymentstatus")
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("paymentid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GrantID");

                    b.ToTable("GrantPaymentDetails");
                });

            modelBuilder.Entity("Noc_App.Models.NocPermissionTypeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NocPermissionTypeDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Residential"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Industrial"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Commercial"
                        });
                });

            modelBuilder.Entity("Noc_App.Models.NocTypeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NocTypeDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Extension of Existing Project"
                        });
                });

            modelBuilder.Entity("Noc_App.Models.OwnerDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("GrantId")
                        .HasColumnType("integer");

                    b.Property<string>("MobileNo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OwnerTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GrantId");

                    b.HasIndex("OwnerTypeId");

                    b.ToTable("OwnerDetails");
                });

            modelBuilder.Entity("Noc_App.Models.OwnerTypeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OwnerTypeDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Partners"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chief Executive"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Full Time Directors"
                        });
                });

            modelBuilder.Entity("Noc_App.Models.ProjectTypeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypeDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Residentials"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Industrial"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Commercial"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Any Other"
                        });
                });

            modelBuilder.Entity("Noc_App.Models.SiteAreaUnitDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SiteAreaUnitDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Biswansi/Biswa/Bigha"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Marla/Kanal/Sarsai"
                        });
                });

            modelBuilder.Entity("Noc_App.Models.SubDivisionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DivisionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DivisionId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SubDivisionDetails");
                });

            modelBuilder.Entity("Noc_App.Models.TehsilBlockDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("SubDivisionId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SubDivisionId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TehsilBlockDetails");
                });

            modelBuilder.Entity("Noc_App.Models.UserDivision", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("DivisionId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "DivisionId");

                    b.HasIndex("DivisionId");

                    b.ToTable("UserDivision");
                });

            modelBuilder.Entity("Noc_App.Models.UserSubdivision", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("SubdivisionId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "SubdivisionId");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("UserSubdivision");
                });

            modelBuilder.Entity("Noc_App.Models.UserTehsil", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("TehsilId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "TehsilId");

                    b.HasIndex("TehsilId");

                    b.ToTable("UserTehsil");
                });

            modelBuilder.Entity("Noc_App.Models.UserVillage", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("VillageId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "VillageId");

                    b.HasIndex("VillageId");

                    b.ToTable("UserVillage");
                });

            modelBuilder.Entity("Noc_App.Models.VillageDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("PinCode")
                        .HasColumnType("integer");

                    b.Property<int>("TehsilBlockId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TehsilBlockId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("VillageDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Noc_App.Models.DivisionDetails", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("Divisions")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Noc_App.Models.ApplicationUser", "User2")
                        .WithMany("Divisions2")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Noc_App.Models.GrantDetails", b =>
                {
                    b.HasOne("Noc_App.Models.NocPermissionTypeDetails", "NocPermissionType")
                        .WithMany("Grants")
                        .HasForeignKey("NocPermissionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.NocTypeDetails", "NocType")
                        .WithMany("Grants")
                        .HasForeignKey("NocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ProjectTypeDetails", "ProjectType")
                        .WithMany("Grants")
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.SiteAreaUnitDetails", "SiteAreaUnits")
                        .WithMany()
                        .HasForeignKey("SiteAreaUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.VillageDetails", "Village")
                        .WithMany("Grants")
                        .HasForeignKey("VillageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NocPermissionType");

                    b.Navigation("NocType");

                    b.Navigation("ProjectType");

                    b.Navigation("SiteAreaUnits");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("Noc_App.Models.GrantKhasraDetails", b =>
                {
                    b.HasOne("Noc_App.Models.GrantDetails", "Grant")
                        .WithMany("Khasras")
                        .HasForeignKey("GrantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.SiteAreaUnitDetails", "Units")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grant");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Noc_App.Models.GrantPaymentDetails", b =>
                {
                    b.HasOne("Noc_App.Models.GrantDetails", "Grant")
                        .WithMany()
                        .HasForeignKey("GrantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grant");
                });

            modelBuilder.Entity("Noc_App.Models.OwnerDetails", b =>
                {
                    b.HasOne("Noc_App.Models.GrantDetails", "Grant")
                        .WithMany("Owners")
                        .HasForeignKey("GrantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.OwnerTypeDetails", "OwnerType")
                        .WithMany("Owners")
                        .HasForeignKey("OwnerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grant");

                    b.Navigation("OwnerType");
                });

            modelBuilder.Entity("Noc_App.Models.SubDivisionDetails", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("SubDivisions")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Noc_App.Models.DivisionDetails", "Division")
                        .WithMany("SubDivision")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ApplicationUser", "User2")
                        .WithMany("SubDivisions2")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Division");

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Noc_App.Models.TehsilBlockDetails", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("TehsilBlocks")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Noc_App.Models.SubDivisionDetails", "SubDivision")
                        .WithMany("TehsilBlock")
                        .HasForeignKey("SubDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ApplicationUser", "User2")
                        .WithMany("TehsilBlocks2")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("SubDivision");

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Noc_App.Models.UserDivision", b =>
                {
                    b.HasOne("Noc_App.Models.DivisionDetails", "Division")
                        .WithMany("UserDivisions")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("UserDivisions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noc_App.Models.UserSubdivision", b =>
                {
                    b.HasOne("Noc_App.Models.SubDivisionDetails", "Subdivision")
                        .WithMany("UserSubdivisions")
                        .HasForeignKey("SubdivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("UserSubdivisions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subdivision");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noc_App.Models.UserTehsil", b =>
                {
                    b.HasOne("Noc_App.Models.TehsilBlockDetails", "Tehsil")
                        .WithMany("UserTehsils")
                        .HasForeignKey("TehsilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("UserTehsils")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tehsil");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noc_App.Models.UserVillage", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("UserVillages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.VillageDetails", "Village")
                        .WithMany("UserVillages")
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("Noc_App.Models.VillageDetails", b =>
                {
                    b.HasOne("Noc_App.Models.ApplicationUser", "User")
                        .WithMany("Villages")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Noc_App.Models.TehsilBlockDetails", "TehsilBlock")
                        .WithMany("Village")
                        .HasForeignKey("TehsilBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noc_App.Models.ApplicationUser", "User2")
                        .WithMany("Villages2")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("TehsilBlock");

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Noc_App.Models.ApplicationUser", b =>
                {
                    b.Navigation("Divisions");

                    b.Navigation("Divisions2");

                    b.Navigation("SubDivisions");

                    b.Navigation("SubDivisions2");

                    b.Navigation("TehsilBlocks");

                    b.Navigation("TehsilBlocks2");

                    b.Navigation("UserDivisions");

                    b.Navigation("UserSubdivisions");

                    b.Navigation("UserTehsils");

                    b.Navigation("UserVillages");

                    b.Navigation("Villages");

                    b.Navigation("Villages2");
                });

            modelBuilder.Entity("Noc_App.Models.DivisionDetails", b =>
                {
                    b.Navigation("SubDivision");

                    b.Navigation("UserDivisions");
                });

            modelBuilder.Entity("Noc_App.Models.GrantDetails", b =>
                {
                    b.Navigation("Khasras");

                    b.Navigation("Owners");
                });

            modelBuilder.Entity("Noc_App.Models.NocPermissionTypeDetails", b =>
                {
                    b.Navigation("Grants");
                });

            modelBuilder.Entity("Noc_App.Models.NocTypeDetails", b =>
                {
                    b.Navigation("Grants");
                });

            modelBuilder.Entity("Noc_App.Models.OwnerTypeDetails", b =>
                {
                    b.Navigation("Owners");
                });

            modelBuilder.Entity("Noc_App.Models.ProjectTypeDetails", b =>
                {
                    b.Navigation("Grants");
                });

            modelBuilder.Entity("Noc_App.Models.SubDivisionDetails", b =>
                {
                    b.Navigation("TehsilBlock");

                    b.Navigation("UserSubdivisions");
                });

            modelBuilder.Entity("Noc_App.Models.TehsilBlockDetails", b =>
                {
                    b.Navigation("UserTehsils");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("Noc_App.Models.VillageDetails", b =>
                {
                    b.Navigation("Grants");

                    b.Navigation("UserVillages");
                });
#pragma warning restore 612, 618
        }
    }
}
